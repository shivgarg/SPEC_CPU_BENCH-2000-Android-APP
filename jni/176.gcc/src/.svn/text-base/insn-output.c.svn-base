/* Generated automatically by the program `genoutput'
from the machine description file `md'.  */

#include "config.h"
#include "rtl.h"
#include "regs.h"
#include "hard-reg-set.h"
#include "real.h"
#include "insn-config.h"

#include "conditions.h"
#include "insn-flags.h"
#include "insn-attr.h"

#include "insn-codes.h"

#include "recog.h"

#include <stdio.h>
#include "output.h"

static char *
output_11 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  operands[4] = gen_rtx (CONST_INT, SImode,
			 exact_log2 (1 + (INTVAL (operands[3])
					  >> INTVAL(operands[2]))));
  return "mak %0,%1,%4<%2>";
}
}

static char *
output_12 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  operands[2]
    = gen_rtx (CONST_INT, SImode,
	       ((1 << INTVAL (operands[2])) - 1) << INTVAL (operands[4]));
  return output_and (operands);
}
}

static char *
output_46 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  int label_num;

  if (GET_CODE (operands[0]) == NE)
    {
      rtx op2 = operands[2];
      operands[2] = operands[3];
      operands[3] = op2;
    }
  if (GET_CODE (operands[3]) == LABEL_REF)
    return "bcnd 0x5,%1,%3\n\tbcnd %#ne0,%d1,%3";

  operands[3] = gen_label_rtx ();
  label_num = XINT (operands[3], 3);
  output_asm_insn ("bcnd 0x5,%1,%3\n\tbcnd %#eq0,%d1,%2", operands);
  output_label (label_num);
  return "";
}
}

static char *
output_58 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_58[] = {
    "fcmp.sss %0,%1,%2",
    "fcmp.sss %0,%1,%#r0",
    "fcmp.sss %0,%1,%2",
    "fcmp.sss %0,%1,%#x0",
  };
  return strings_58[which_alternative];
}

static char *
output_61 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_61[] = {
    "fcmp.sdd %0,%1,%2",
    "fcmp.sds %0,%1,%#r0",
    "fcmp.sdd %0,%1,%2",
    "fcmp.sds %0,%1,%#x0",
  };
  return strings_61[which_alternative];
}

static char *
output_94 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  if (mostly_false_jump (insn, operands[0]))
    return "bb0%. %R2%C0,%1,%P2%P3";
  else
    return "bb1%. %R3%C0,%1,%P2%P3";
}
}

static char *
output_107 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_107[] = {
    "or %0,%#r0,%1",
    "%V1ld\t %0,%1",
    "%v0st\t %r1,%0",
    "subu %0,%#r0,%n1",
    "set %0,%#r0,%s1",
    "mov.s %0,%1",
    "mov.s %0,%1",
    "mov %0,%1",
    "%V1ld\t %0,%1",
    "%v0st\t %1,%0",
  };
  return strings_107[which_alternative];
}

static char *
output_108 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_108[] = {
    "or %0,%#r0,%1",
    "subu %0,%#r0,%n1",
    "or.u %0,%#r0,%X1",
    "set %0,%#r0,%s1",
    "or.u %0,%#r0,%X1\n\tor %0,%0,%x1",
  };
  return strings_108[which_alternative];
}

static char *
output_114 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_114[] = {
    "or %0,%#r0,%h1",
    "%V1ld.hu\t %0,%1",
    "%v0st.h\t %r1,%0",
    "subu %0,%#r0,%H1",
  };
  return strings_114[which_alternative];
}

static char *
output_117 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_117[] = {
    "or %0,%#r0,%q1",
    "%V1ld.bu\t %0,%1",
    "%v0st.b\t %r1,%0",
    "subu %r0,%#r0,%Q1",
  };
  return strings_117[which_alternative];
}

static char *
output_120 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_120[] = {
    "or %0,%#r0,0\n\tor %d0,%#r0,0",
    "mov %0,%#x0",
  };
  return strings_120[which_alternative];
}

static char *
output_121 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_121[] = {
    "or %0,%#r0,%1\n\tor %d0,%#r0,%d1",
    "%V1ld.d\t %0,%1",
    "%v0st.d\t %1,%0",
    "mov.d %0,%1",
    "mov.d %0,%1",
    "mov %0,%1",
    "%V1ld.d\t %0,%1",
    "%v0st.d\t %1,%0",
  };
  return strings_121[which_alternative];
}

static char *
output_123 (operands, insn)
     rtx *operands;
     rtx insn;
{
 return output_load_const_dimode (operands);
}

static char *
output_126 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_126[] = {
    "or %0,%#r0,0\n\tor %d0,%#r0,0",
    "mov %0,%#x0",
  };
  return strings_126[which_alternative];
}

static char *
output_127 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_127[] = {
    "or %0,%#r0,%1\n\tor %d0,%#r0,%d1",
    "%V1ld.d\t %0,%1",
    "%v0st.d\t %1,%0",
    "mov.d %0,%1",
    "mov.d %0,%1",
    "mov %0,%1",
    "%V1ld.d\t %0,%1",
    "%v0st.d\t %1,%0",
  };
  return strings_127[which_alternative];
}

static char *
output_129 (operands, insn)
     rtx *operands;
     rtx insn;
{
 return output_load_const_double (operands);
}

static char *
output_131 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_131[] = {
    "or %0,%#r0,0",
    "mov %0,%#x0",
  };
  return strings_131[which_alternative];
}

static char *
output_132 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_132[] = {
    "or %0,%#r0,%1",
    "%V1ld\t %0,%1",
    "%v0st\t %r1,%0",
    "mov.s %0,%1",
    "mov.s %0,%1",
    "mov %0,%1",
    "%V1ld\t %0,%1",
    "%v0st\t %r1,%0",
  };
  return strings_132[which_alternative];
}

static char *
output_134 (operands, insn)
     rtx *operands;
     rtx insn;
{
 return output_load_const_float (operands);
}

static char *
output_147 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_147[] = {
    "mask %0,%1,0xffff",
    "or %0,%#r0,%h1",
    "%V1ld.hu\t %0,%1",
  };
  return strings_147[which_alternative];
}

static char *
output_149 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_149[] = {
    "mask %0,%1,0xff",
    "or %0,%#r0,%q1",
    "%V1ld.bu\t %0,%1",
  };
  return strings_149[which_alternative];
}

static char *
output_151 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_151[] = {
    "mask %0,%1,0xff",
    "or %0,%#r0,%q1",
    "%V1ld.bu\t %0,%1",
  };
  return strings_151[which_alternative];
}

static char *
output_154 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_154[] = {
    "ext %0,%1,16<0>",
    "or %0,%#r0,%h1",
    "subu %0,%#r0,%H1",
    "%V1ld.h\t %0,%1",
  };
  return strings_154[which_alternative];
}

static char *
output_156 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_156[] = {
    "ext %0,%1,8<0>",
    "or %0,%#r0,%q1",
    "subu %0,%#r0,%Q1",
    "%V1ld.b\t %0,%1",
  };
  return strings_156[which_alternative];
}

static char *
output_158 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_158[] = {
    "ext %0,%1,8<0>",
    "or %0,%#r0,%q1",
    "subu %0,%#r0,%Q1",
    "%V1ld.b\t %0,%1",
  };
  return strings_158[which_alternative];
}

static char *
output_169 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_169[] = {
    "addu %0,%1,%2",
    "subu %0,%1,%n2",
  };
  return strings_169[which_alternative];
}

static char *
output_223 (operands, insn)
     rtx *operands;
     rtx insn;
{
 return output_and (operands);
}

static char *
output_225 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  rtx xoperands[10];

  xoperands[0] = operand_subword (operands[0], 1, 0, DImode);
  xoperands[1] = operand_subword (operands[1], 1, 0, DImode);
  xoperands[2] = operand_subword (operands[2], 1, 0, DImode);

  output_asm_insn (output_and (xoperands), xoperands);

  operands[0] = operand_subword (operands[0], 0, 0, DImode);
  operands[1] = operand_subword (operands[1], 0, 0, DImode);
  operands[2] = operand_subword (operands[2], 0, 0, DImode);

  return output_and (operands);
}
}

static char *
output_228 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_228[] = {
    "or %0,%1,%2",
    "or.u %0,%1,%X2",
    "set %0,%1,%s2",
    "or.u %0,%1,%X2\n\tor %0,%0,%x2",
  };
  return strings_228[which_alternative];
}

static char *
output_230 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  rtx xoperands[10];

  xoperands[0] = operand_subword (operands[0], 1, 0, DImode);
  xoperands[1] = operand_subword (operands[1], 1, 0, DImode);
  xoperands[2] = operand_subword (operands[2], 1, 0, DImode);

  output_asm_insn (output_ior (xoperands), xoperands);

  operands[0] = operand_subword (operands[0], 0, 0, DImode);
  operands[1] = operand_subword (operands[1], 0, 0, DImode);
  operands[2] = operand_subword (operands[2], 0, 0, DImode);

  return output_ior (operands);
}
}

static char *
output_233 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_233[] = {
    "xor %0,%1,%2",
    "xor.u %0,%1,%X2",
    "xor.u %0,%1,%X2\n\txor %0,%0,%x2",
  };
  return strings_233[which_alternative];
}

static char *
output_235 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  rtx xoperands[10];

  xoperands[0] = operand_subword (operands[0], 1, 0, DImode);
  xoperands[1] = operand_subword (operands[1], 1, 0, DImode);
  xoperands[2] = operand_subword (operands[2], 1, 0, DImode);

  output_asm_insn (output_xor (xoperands), xoperands);

  operands[0] = operand_subword (operands[0], 0, 0, DImode);
  operands[1] = operand_subword (operands[1], 0, 0, DImode);
  operands[2] = operand_subword (operands[2], 0, 0, DImode);

  return output_xor (operands);
}
}

static char *
output_245 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_245[] = {
    "mak %0,%1,%2",
    "mak %0,%1,0<%2>",
  };
  return strings_245[which_alternative];
}

static char *
output_247 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_247[] = {
    "ext %0,%1,%2",
    "ext %0,%1,0<%2>",
  };
  return strings_247[which_alternative];
}

static char *
output_249 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_249[] = {
    "extu %0,%1,%2",
    "extu %0,%1,0<%2>",
  };
  return strings_249[which_alternative];
}

static char *
output_252 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_252[] = {
    "subu.co %2,%#r0,%1\n\tand %2,%2,%1\n\taddu.ci %2,%2,%2\n\tff1 %0,%2",
    "subu.co %0,%#r0,%1\n\tand %0,%0,%1\n\taddu.ci %0,%0,%0\n\tff1 %0,%0",
  };
  return strings_252[which_alternative];
}

static char *
output_254 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  operands[4] = gen_rtx (CONST_INT, SImode,
			 (32 - INTVAL (operands[2])) - INTVAL (operands[3]));
  return "ext %0,%1,%2<%4>";  /* <(32-%2-%3)> */
}
}

static char *
output_256 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  operands[4] = gen_rtx (CONST_INT, SImode,
			 (32 - INTVAL (operands[2])) - INTVAL (operands[3]));
  return "extu %0,%1,%2<%4>";  /* <(32-%2-%3)> */
}
}

static char *
output_257 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  operands[3] = gen_rtx (CONST_INT, SImode,
			 (32 - INTVAL (operands[1])) - INTVAL (operands[2]));
  return "clr %0,%0,%1<%3>";  /* <(32-%1-%2)> */
}
}

static char *
output_258 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  operands[3] = gen_rtx (CONST_INT, SImode,
			 (32 - INTVAL (operands[1])) - INTVAL (operands[2]));
  return "set %0,%0,%1<%3>";  /* <(32-%1-%2)> */
}
}

static char *
output_259 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  int value = INTVAL (operands[3]);

  if (INTVAL (operands[1]) < 32)
    value &= (1 << INTVAL (operands[1])) - 1;

  operands[2] = gen_rtx (CONST_INT, VOIDmode,
			 32 - (INTVAL(operands[1]) + INTVAL(operands[2])));

  value <<= INTVAL (operands[2]);
  operands[3] = gen_rtx (CONST_INT, VOIDmode, value);

  if (SMALL_INTVAL (value))
    return "clr %0,%0,%1<%2>\n\tor %0,%0,%3";
  else if ((value & 0x0000ffff) == 0)
    return "clr %0,%0,%1<%2>\n\tor.u %0,%0,%X3";
  else
    return "clr %0,%0,%1<%2>\n\tor.u %0,%0,%X3\n\tor %0,%0,%x3";
}
}

static char *
output_261 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_261[] = {
    "fsub.ssd %0,%#r0,%1",
    "fsub.ssd %0,%#x0,%1",
  };
  return strings_261[which_alternative];
}

static char *
output_262 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_262[] = {
    "xor.u %0,%1,0x8000\n\tor %d0,%#r0,%d1",
    "xor.u %0,%0,0x8000",
  };
  return strings_262[which_alternative];
}

static char *
output_264 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_264[] = {
    "and.u %0,%1,0x7fff\n\tor %d0,%#r0,%d1",
    "and.u %0,%0,0x7fff",
  };
  return strings_264[which_alternative];
}

static char *
output_269 (operands, insn)
     rtx *operands;
     rtx insn;
{

{
  if (flag_delayed_branch)
    return "bsr.n %0e\n\tlda %#r1,%#r1[%1]";
  m88k_case_index = REGNO (operands[1]);
  return "bsr %0e";
}
}

static char *
output_271 (operands, insn)
     rtx *operands;
     rtx insn;
{
 return output_call (operands, operands[0]);
}

static char *
output_273 (operands, insn)
     rtx *operands;
     rtx insn;
{
 return output_call (operands, operands[1]);
}

static char *
output_281 (operands, insn)
     rtx *operands;
     rtx insn;
{
  static /*const*/ char *const strings_281[] = {
    "bcnd.n %B0,%1,%2\n\taddu %1,%1,%3",
    "bcnd.n %B0,%1,%2\n\tsubu %1,%1,%n3",
    "ld %4,%1\n\taddu %5,%4,%3\n\tbcnd.n %B0,%4,%2\n\tst %5,%1",
    "ld %4,%1\n\tsubu %5,%4,%n3\n\tbcnd.n %B0,%4,%2\n\tst %5,%1",
  };
  return strings_281[which_alternative];
}

char * const insn_template[] =
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "set %0,%#r0,%1",
    "set %0,%2,%1",
    "set %0,%1,%2",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "and.c %0,%2,%1",
    "and %0,%1,%2",
    "or.c %0,%2,%1",
    "or %0,%1,%2",
    "rot %0,%1,%2",
    "rot %0,%1,%2",
    0,
    "#",
    0,
    "#",
    0,
    "#",
    0,
    "#",
    "bcnd%. %R3%B0,%1,%P2%P3",
    "bcnd%. %R3%E0,%1,%P2%P3",
    "bcnd%. %R3%D0,%1,%P2%P3",
    "bcnd%. %R3%B0,%1,%P2%P3",
    "bcnd%. %R3%B0,%1,%P2%P3",
    "bcnd%. %R3%D0,%1,%P2%P3",
    "bcnd%. %R3%D0,%1,%P2%P3",
    0,
    "bb%L2 (31-%1),%0,%P2%P3",
    "bb%L3 (31-%1),%0,%P2%P3",
    "bb%L2 (31-%1),%0,%P2%P3",
    "bb%L3 (31-%1),%0,%P2%P3",
    "bb%L3 %p1,%0,%P2%P3",
    "bb%L2 %p1,%0,%P2%P3",
    0,
    0,
    0,
    0,
    "cmp %0,%r1,%2",
    0,
    "fcmp.sds %0,%1,%2",
    "fcmp.ssd %0,%1,%2",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "ext %0,%2,1<%C1>",
    "ext %0,%2,1<%C1>",
    "ext %0,%2,1<%!%C1>",
    0,
    "#",
    "extu %0,%2,1<%C1>",
    "extu %0,%2,1<%C1>",
    "extu %0,%2,1<%!%C1>",
    0,
    "#",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "bb%L2%. %C0,%1,%P2%P3",
    "bb%L3%. %!%C0,%1,%P2%P3",
    "bb%L2 %C0,%1,%P2%P3",
    "bb%L2 %C0,%1,%P2%P3",
    "bb%L3 %!%C0,%1,%P2%P3",
    "bb%L3 %C0,%1,%P2%P3",
    "bb%L3 %C0,%1,%P2%P3",
    "bb%L2 %!%C0,%1,%P2%P3",
    "or.u %0,%#r0,%#hi16(%1#abdiff)",
    "bsr.n %1\n\tor %0,%0,%#lo16(%1#abdiff)\n%1:",
    0,
    0,
    0,
    0,
    "or %0,%1,%#lo16(%g2)",
    "or %0,%1,%#lo16(%g2)",
    "or.u %0,%#r0,%#hi16(%g1)",
    "or.u %0,%#r0,%#hi16(%g1)",
    0,
    0,
    "or %0,%1,%#lo16(%2)",
    0,
    0,
    "or %0,%1,%#lo16(%2)",
    0,
    0,
    0,
    "or %0,%1,%#lo16(%2)",
    0,
    0,
    0,
    0,
    0,
    "or %0,%1,%#lo16(%2)",
    0,
    0,
    0,
    0,
    "or %0,%1,%#lo16(%2)",
    0,
    0,
    "%V1ld.bu\t %0,%1",
    "%V1ld.hu\t %0,%1",
    "%V1ld\t %0,%1",
    "%V1ld.d\t %0,%1",
    "%v0st.b\t %1,%0",
    "%v0st.h\t %1,%0",
    "%v0st\t %1,%0",
    "%v0st.d\t %1,%0",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "fsub.dss %0,%1,%#r0",
    "fcvt.ds %0,%1",
    0,
    "fsub.sds %0,%1,%#r0",
    "fcvt.sd %0,%1",
    "flt.ds %0,%1",
    "flt.ss %0,%1",
    "trnc.sd %0,%1",
    "trnc.ss %0,%1",
    0,
    0,
    "fadd.dss %0,%1,%2",
    "fadd.dds %0,%1,%2",
    "fadd.dsd %0,%1,%2",
    "fadd.ddd %0,%1,%2",
    "fadd.sss %0,%1,%2",
    "addu.co %d0,%d1,%2\n\taddu.ci %0,%1,%#r0",
    "addu.co %d0,%1,%d2\n\taddu.ci %0,%#r0,%2",
    "addu.co %d0,%d1,%d2\n\taddu.ci %0,%1,%2",
    "addu.co %r0,%r1,%r2",
    "addu.co %#r0,%r0,%r1",
    "addu.ci %r0,%r1,%r2",
    "subu %0,%1,%2",
    0,
    "fsub.dss %0,%1,%2",
    "fsub.dds %0,%1,%2",
    "fsub.dsd %0,%1,%2",
    "fsub.ddd %0,%1,%2",
    "fsub.sss %0,%1,%2",
    "subu.co %d0,%d1,%2\n\tsubu.ci %0,%1,%#r0",
    "subu.co %d0,%1,%d2\n\tsubu.ci %0,%#r0,%2",
    "subu.co %d0,%d1,%d2\n\tsubu.ci %0,%1,%2",
    "subu.co %r0,%r1,%r2",
    "subu.co %#r0,%r0,%r1",
    "subu.ci %r0,%r1,%r2",
    "mul %0,%1,%2",
    0,
    "fmul.dss %0,%1,%2",
    "fmul.dds %0,%1,%2",
    "fmul.dsd %0,%1,%2",
    "fmul.ddd %0,%1,%2",
    "fmul.sss %0,%1,%2",
    "tb0 0,%#r0,503",
    0,
    0,
    "div %0,%1,%2",
    0,
    "divu %0,%1,%2",
    "tb0 0,%#r0,503",
    0,
    "fdiv.dss %0,%1,%2",
    "fdiv.dds %0,%1,%2",
    "fdiv.dsd %0,%1,%2",
    "fdiv.sss %0,%1,%2",
    "fdiv.ddd %0,%1,%2",
    "addu %0,%a1",
    "lda.h %0,%a1",
    "lda %0,%a1",
    "lda.d %0,%a1",
    "lda %0,%a1",
    "lda.d %0,%a1",
    "and.c %0,%2,%1",
    0,
    0,
    "and.c %d0,%d2,%d1\n\tand.c %0,%2,%1",
    0,
    "or.c %0,%2,%1",
    0,
    0,
    "or.c %d0,%d2,%d1\n\tor.c %0,%2,%1",
    0,
    "xor.c %0,%1,%2",
    0,
    0,
    "xor.c %d0,%d1,%d2\n\txor.c %0,%1,%2",
    0,
    "xor.c %0,%1,%#r0",
    "xor.c %d0,%d1,%#r0\n\txor.c %0,%1,%#r0",
    "%V1ld.b\t %0,%1",
    "%V1ld.bu\t %0,%1",
    "%V1ld.h\t %0,%1",
    "%V1ld.hu\t %0,%1",
    "tbnd %r0,%1",
    "tbnd %#r31,0",
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    "rot %0,%1,%2",
    0,
    "or %0,%#r0,%1",
    0,
    "or %0,%#r0,%1",
    0,
    0,
    0,
    0,
    "subu %0,%#r0,%1",
    0,
    0,
    "xor.u %0,%1,0x8000",
    0,
    "and.u %0,%1,0x7fff",
    0,
    0,
    "jmp%. %0",
    0,
    0,
    0,
    0,
    0,
    "ff0 %#r0,%#r0",
    "jmp%. %#r1",
    0,
    0,
    "",
    "jmp%. %0",
    "br%. %l0",
    0,
    0,
  };

char *(*const insn_outfun[])() =
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_11,
    output_12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_46,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_58,
    0,
    0,
    output_61,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_94,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_107,
    output_108,
    0,
    0,
    0,
    0,
    0,
    output_114,
    0,
    0,
    output_117,
    0,
    0,
    output_120,
    output_121,
    0,
    output_123,
    0,
    0,
    output_126,
    output_127,
    0,
    output_129,
    0,
    output_131,
    output_132,
    0,
    output_134,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_147,
    0,
    output_149,
    0,
    output_151,
    0,
    0,
    output_154,
    0,
    output_156,
    0,
    output_158,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_169,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_223,
    0,
    output_225,
    0,
    0,
    output_228,
    0,
    output_230,
    0,
    0,
    output_233,
    0,
    output_235,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_245,
    0,
    output_247,
    0,
    output_249,
    0,
    0,
    output_252,
    0,
    output_254,
    0,
    output_256,
    output_257,
    output_258,
    output_259,
    0,
    output_261,
    output_262,
    0,
    output_264,
    0,
    0,
    0,
    0,
    output_269,
    0,
    output_271,
    0,
    output_273,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    output_281,
    0,
  };

rtx (*const insn_gen_function[]) () =
  {
    gen_m88k_rcs_id,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    gen_test,
    gen_cmpsi,
    gen_cmpsf,
    gen_cmpdf,
    0,
    0,
    0,
    0,
    0,
    gen_seq,
    gen_sne,
    gen_sgt,
    gen_sgtu,
    gen_slt,
    gen_sltu,
    gen_sge,
    gen_sgeu,
    gen_sle,
    gen_sleu,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    gen_bcnd,
    gen_bxx,
    gen_beq,
    gen_bne,
    gen_bgt,
    gen_bgtu,
    gen_blt,
    gen_bltu,
    gen_bge,
    gen_bgeu,
    gen_ble,
    gen_bleu,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    gen_locate1,
    gen_locate2,
    gen_movsi,
    gen_reload_insi,
    0,
    0,
    0,
    0,
    0,
    0,
    gen_movhi,
    0,
    0,
    gen_movqi,
    0,
    0,
    gen_movdi,
    0,
    0,
    0,
    0,
    gen_movdf,
    0,
    0,
    0,
    0,
    0,
    gen_movsf,
    0,
    0,
    0,
    0,
    gen_movstrsi,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    gen_call_block_move,
    gen_call_movstrsi_loop,
    gen_zero_extendhisi2,
    0,
    gen_zero_extendqihi2,
    0,
    gen_zero_extendqisi2,
    0,
    gen_extendsidi2,
    gen_extendhisi2,
    0,
    gen_extendqihi2,
    0,
    gen_extendqisi2,
    0,
    gen_extendsfdf2,
    0,
    0,
    gen_truncdfsf2,
    0,
    0,
    gen_floatsidf2,
    gen_floatsisf2,
    gen_fix_truncdfsi2,
    gen_fix_truncsfsi2,
    gen_addsi3,
    gen_adddf3,
    0,
    0,
    0,
    0,
    gen_addsf3,
    0,
    0,
    gen_adddi3,
    0,
    0,
    0,
    gen_subsi3,
    gen_subdf3,
    0,
    0,
    0,
    0,
    gen_subsf3,
    0,
    0,
    gen_subdi3,
    0,
    0,
    0,
    gen_mulsi3,
    gen_muldf3,
    0,
    0,
    0,
    0,
    gen_mulsf3,
    gen_trap_divide_by_zero,
    gen_tcnd_divide_by_zero,
    gen_divsi3,
    0,
    gen_udivsi3,
    0,
    0,
    gen_divdf3,
    0,
    0,
    0,
    gen_divsf3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    gen_andsi3,
    0,
    0,
    gen_anddi3,
    0,
    gen_iorsi3,
    0,
    0,
    gen_iordi3,
    0,
    gen_xorsi3,
    0,
    0,
    gen_xordi3,
    gen_one_cmplsi2,
    gen_one_cmpldi2,
    0,
    0,
    0,
    0,
    gen_tbnd,
    0,
    gen_ashlsi3,
    0,
    gen_ashrsi3,
    0,
    gen_lshrsi3,
    0,
    gen_rotlsi3,
    gen_rotrsi3,
    gen_ffssi2,
    0,
    gen_extv,
    0,
    gen_extzv,
    0,
    0,
    0,
    gen_negsi2,
    0,
    gen_negdf2,
    gen_negsf2,
    gen_absdf2,
    gen_abssf2,
    gen_casesi,
    gen_casesi_jump,
    0,
    gen_casesi_enter,
    gen_call,
    0,
    gen_call_value,
    0,
    gen_nop,
    gen_return,
    gen_prologue,
    gen_epilogue,
    gen_blockage,
    gen_indirect_jump,
    gen_jump,
    gen_decrement_and_branch_until_zero,
    gen_dummy,
  };

char *insn_name[] =
  {
    "m88k_rcs_id",
    "m88k_rcs_id+1",
    "m88k_rcs_id+2",
    "m88k_rcs_id+3",
    "m88k_rcs_id+4",
    "m88k_rcs_id+5",
    "m88k_rcs_id+6",
    "m88k_rcs_id+7",
    "m88k_rcs_id+8",
    "m88k_rcs_id+9",
    "m88k_rcs_id+10",
    "m88k_rcs_id+11",
    "m88k_rcs_id+12",
    "m88k_rcs_id+13",
    "m88k_rcs_id+14",
    "m88k_rcs_id+15",
    "m88k_rcs_id+16",
    "m88k_rcs_id+17",
    "m88k_rcs_id+18",
    "m88k_rcs_id+19",
    "m88k_rcs_id+20",
    "m88k_rcs_id+21",
    "m88k_rcs_id+22",
    "m88k_rcs_id+23",
    "m88k_rcs_id+24",
    "m88k_rcs_id+25",
    "m88k_rcs_id+26",
    "test-26",
    "test-25",
    "test-24",
    "test-23",
    "test-22",
    "test-21",
    "test-20",
    "test-19",
    "test-18",
    "test-17",
    "test-16",
    "test-15",
    "test-14",
    "test-13",
    "test-12",
    "test-11",
    "test-10",
    "test-9",
    "test-8",
    "test-7",
    "test-6",
    "test-5",
    "test-4",
    "test-3",
    "test-2",
    "test-1",
    "test",
    "cmpsi",
    "cmpsf",
    "cmpdf",
    "cmpdf+1",
    "cmpdf+2",
    "cmpdf+3",
    "seq-2",
    "seq-1",
    "seq",
    "sne",
    "sgt",
    "sgtu",
    "slt",
    "sltu",
    "sge",
    "sgeu",
    "sle",
    "sleu",
    "sleu+1",
    "sleu+2",
    "sleu+3",
    "sleu+4",
    "sleu+5",
    "bcnd-5",
    "bcnd-4",
    "bcnd-3",
    "bcnd-2",
    "bcnd-1",
    "bcnd",
    "bxx",
    "beq",
    "bne",
    "bgt",
    "bgtu",
    "blt",
    "bltu",
    "bge",
    "bgeu",
    "ble",
    "bleu",
    "bleu+1",
    "bleu+2",
    "bleu+3",
    "bleu+4",
    "bleu+5",
    "locate1-4",
    "locate1-3",
    "locate1-2",
    "locate1-1",
    "locate1",
    "locate2",
    "movsi",
    "reload_insi",
    "reload_insi+1",
    "reload_insi+2",
    "reload_insi+3",
    "movhi-3",
    "movhi-2",
    "movhi-1",
    "movhi",
    "movhi+1",
    "movqi-1",
    "movqi",
    "movqi+1",
    "movdi-1",
    "movdi",
    "movdi+1",
    "movdi+2",
    "movdf-2",
    "movdf-1",
    "movdf",
    "movdf+1",
    "movdf+2",
    "movdf+3",
    "movsf-2",
    "movsf-1",
    "movsf",
    "movsf+1",
    "movsf+2",
    "movstrsi-2",
    "movstrsi-1",
    "movstrsi",
    "movstrsi+1",
    "movstrsi+2",
    "movstrsi+3",
    "movstrsi+4",
    "call_block_move-4",
    "call_block_move-3",
    "call_block_move-2",
    "call_block_move-1",
    "call_block_move",
    "call_movstrsi_loop",
    "zero_extendhisi2",
    "zero_extendhisi2+1",
    "zero_extendqihi2",
    "zero_extendqihi2+1",
    "zero_extendqisi2",
    "zero_extendqisi2+1",
    "extendsidi2",
    "extendhisi2",
    "extendhisi2+1",
    "extendqihi2",
    "extendqihi2+1",
    "extendqisi2",
    "extendqisi2+1",
    "extendsfdf2",
    "extendsfdf2+1",
    "truncdfsf2-1",
    "truncdfsf2",
    "truncdfsf2+1",
    "floatsidf2-1",
    "floatsidf2",
    "floatsisf2",
    "fix_truncdfsi2",
    "fix_truncsfsi2",
    "addsi3",
    "adddf3",
    "adddf3+1",
    "adddf3+2",
    "addsf3-2",
    "addsf3-1",
    "addsf3",
    "addsf3+1",
    "adddi3-1",
    "adddi3",
    "adddi3+1",
    "adddi3+2",
    "subsi3-1",
    "subsi3",
    "subdf3",
    "subdf3+1",
    "subdf3+2",
    "subsf3-2",
    "subsf3-1",
    "subsf3",
    "subsf3+1",
    "subdi3-1",
    "subdi3",
    "subdi3+1",
    "subdi3+2",
    "mulsi3-1",
    "mulsi3",
    "muldf3",
    "muldf3+1",
    "muldf3+2",
    "mulsf3-2",
    "mulsf3-1",
    "mulsf3",
    "trap_divide_by_zero",
    "tcnd_divide_by_zero",
    "divsi3",
    "divsi3+1",
    "udivsi3",
    "udivsi3+1",
    "divdf3-1",
    "divdf3",
    "divdf3+1",
    "divdf3+2",
    "divsf3-1",
    "divsf3",
    "divsf3+1",
    "divsf3+2",
    "divsf3+3",
    "divsf3+4",
    "andsi3-4",
    "andsi3-3",
    "andsi3-2",
    "andsi3-1",
    "andsi3",
    "andsi3+1",
    "anddi3-1",
    "anddi3",
    "anddi3+1",
    "iorsi3",
    "iorsi3+1",
    "iordi3-1",
    "iordi3",
    "iordi3+1",
    "xorsi3",
    "xorsi3+1",
    "xordi3-1",
    "xordi3",
    "one_cmplsi2",
    "one_cmpldi2",
    "one_cmpldi2+1",
    "one_cmpldi2+2",
    "tbnd-2",
    "tbnd-1",
    "tbnd",
    "tbnd+1",
    "ashlsi3",
    "ashlsi3+1",
    "ashrsi3",
    "ashrsi3+1",
    "lshrsi3",
    "lshrsi3+1",
    "rotlsi3",
    "rotrsi3",
    "ffssi2",
    "ffssi2+1",
    "extv",
    "extv+1",
    "extzv",
    "extzv+1",
    "extzv+2",
    "negsi2-1",
    "negsi2",
    "negsi2+1",
    "negdf2",
    "negsf2",
    "absdf2",
    "abssf2",
    "casesi",
    "casesi_jump",
    "casesi_jump+1",
    "casesi_enter",
    "call",
    "call+1",
    "call_value",
    "call_value+1",
    "nop",
    "return",
    "prologue",
    "epilogue",
    "blockage",
    "indirect_jump",
    "jump",
    "decrement_and_branch_until_zero",
    "dummy",
  };
char **insn_name_ptr = insn_name;

const int insn_n_operands[] =
  {
    1,
    4,
    4,
    3,
    4,
    4,
    3,
    3,
    2,
    3,
    3,
    4,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    3,
    3,
    3,
    3,
    3,
    3,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    3,
    3,
    3,
    4,
    4,
    3,
    3,
    3,
    4,
    4,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    1,
    1,
    2,
    3,
    2,
    2,
    3,
    3,
    2,
    2,
    2,
    2,
    3,
    2,
    2,
    3,
    2,
    1,
    2,
    3,
    2,
    2,
    2,
    1,
    2,
    3,
    2,
    2,
    1,
    2,
    3,
    2,
    4,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    6,
    7,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    0,
    2,
    3,
    3,
    3,
    3,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    4,
    2,
    4,
    3,
    3,
    4,
    2,
    2,
    2,
    2,
    2,
    2,
    5,
    3,
    1,
    2,
    2,
    2,
    3,
    3,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    6,
    1,
  };

const int insn_n_dups[] =
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
  };

char *const insn_operand_constraint[][MAX_RECOG_OPERANDS] =
  {
    { "", },
    { "", "", "", "", },
    { "", "", "", "", },
    { "", "", "", },
    { "", "", "", "", },
    { "", "", "", "", },
    { "", "", "", },
    { "", "", "", },
    { "=r", "r", },
    { "=r", "r", "r", },
    { "=r", "r", "r", },
    { "=r", "r", "", "n", },
    { "=r", "r", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", },
    { "=r", "r", "r", },
    { "=r", "%r", "r", },
    { "=r", "r", "r", },
    { "=r", "%r", "r", },
    { "=r", "r", "", },
    { "=r", "r", "", },
    { "", "", "", "", "", },
    { "=r", "r", "", "r", "=r", },
    { "", "", "", "", "", },
    { "=r", "r", "", "r", "=r", },
    { "", "", "", "", "", },
    { "=r", "r", "", "r", "=r", },
    { "", "", "", "", "", },
    { "=r", "r", "", "r", "=r", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "r", "", "", "", },
    { "r", "", "", "", },
    { "r", "", "", "", },
    { "r", "", "", "", },
    { "%r", "n", "", "", },
    { "%r", "n", "", "", },
    { "", "", },
    { "", "", },
    { "", "", },
    { "", "", },
    { "=r", "rO", "rI", },
    { "=r,r,r,r", "r,r,x,x", "r,G,x,G", },
    { "=r,r", "r,x", "r,x", },
    { "=r,r", "r,x", "r,x", },
    { "=r,r,r,r", "r,r,x,x", "r,G,x,G", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "", },
    { "=r", "", "r", },
    { "=r", "", "r", },
    { "=r", "", "r", },
    { "", "", "", "", },
    { "=r", "", "r", "=r", },
    { "=r", "", "r", },
    { "=r", "", "r", },
    { "=r", "", "r", },
    { "", "", "", "", },
    { "=r", "", "r", "=r", },
    { "", },
    { "", },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "", "r", "", "", },
    { "=r", },
    { "=r", },
    { "", "", },
    { "=r", "", "=&r", },
    { "=r,r,m,r,r,r,x,x,x,m", "rI,m,rO,J,M,x,r,x,m,x", },
    { "=r,r,r,r,r", "rI,J,L,M,n", },
    { "=r", "r", "in", },
    { "=r", "r", "in", },
    { "=r", "", },
    { "=r", "", },
    { "", "", },
    { "=r,r,m,r", "rP,m,rO,N", },
    { "=r", "r", "in", },
    { "", "", },
    { "=r,r,m,r", "rP,m,rO,N", },
    { "=r", "r", "in", },
    { "", "", },
    { "=r,x", },
    { "=r,r,m,r,x,x,x,m", "r,m,r,x,r,x,m,x", },
    { "=r", "r", "in", },
    { "=r", "n", },
    { "", "", },
    { "", "", },
    { "=r,x", },
    { "=r,r,m,x,r,x,x,m", "r,m,r,r,x,x,m,x", },
    { "=r", "r", "in", },
    { "=r", "F", },
    { "", "", },
    { "=r,x", },
    { "=r,r,m,x,r,x,x,m", "r,m,r,r,x,x,m,x", },
    { "=r", "r", "in", },
    { "=r", "F", },
    { "", "", "", "", },
    { "=r", "m", },
    { "=r", "m", },
    { "=r", "m", },
    { "=r", "m", },
    { "=m", "r", },
    { "=m", "r", },
    { "=m", "r", },
    { "=m", "r", },
    { "", "", "", "", "", "", },
    { "", "", "", "", "", "", "", },
    { "", "", },
    { "=r,r,r", "!r,n,m", },
    { "", "", },
    { "=r,r,r", "r,n,m", },
    { "", "", },
    { "=r,r,r", "r,n,m", },
    { "=r", "g", },
    { "", "", },
    { "=r,r,r,r", "!r,P,N,m", },
    { "", "", },
    { "=r,r,r,r", "!r,P,N,m", },
    { "", "", },
    { "=r,r,r,r", "!r,P,N,m", },
    { "=r", "r", },
    { "=r", "r", },
    { "=r,x", "r,x", },
    { "=r", "r", },
    { "=r", "r", },
    { "=r,x", "r,x", },
    { "=r,x", "r,r", },
    { "=r,x", "r,r", },
    { "=r,r", "r,x", },
    { "=r,r", "r,x", },
    { "=r,r", "%r,r", "rI,J", },
    { "=r,x", "%r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "%r,x", "r,x", },
    { "=r,x", "%r,x", "r,x", },
    { "=r", "r", "r", },
    { "=r", "r", "r", },
    { "=r", "%r", "r", },
    { "=r", "rO", "rO", },
    { "rO", "rO", },
    { "=r", "rO", "rO", },
    { "=r", "r", "rI", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r", "r", "r", },
    { "=r", "r", "r", },
    { "=r", "r", "r", },
    { "=r", "rO", "rO", },
    { "rO", "rO", },
    { "=r", "rO", "rO", },
    { "=r", "%r", "rI", },
    { "=r,x", "%r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "%r,x", "r,x", },
    { "=r,x", "%r,x", "r,x", },
    { 0 },
    { "", "", },
    { "", "", "", },
    { "=r", "r", "rI", },
    { "", "", "", },
    { "=r", "r", "rI", },
    { "=r", "r", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r,x", "r,x", "r,x", },
    { "=r", "p", },
    { "=r", "p", },
    { "=r", "p", },
    { "=r", "p", },
    { "=r", "p", },
    { "=r", "p", },
    { "=r", "r", "r", },
    { "", "", "", },
    { "=r,r", "%r,r", "rIJL,rn", },
    { "=r", "r", "r", },
    { "=r", "%r", "rn", },
    { "=r", "r", "r", },
    { "", "", "", },
    { "=r,r,r,r", "%r,r,r,r", "rI,L,M,n", },
    { "=r", "r", "r", },
    { "=r", "%r", "rn", },
    { "=r", "%r", "r", },
    { "", "", "", },
    { "=r,r,r", "%r,r,r", "rI,L,n", },
    { "=r", "r", "r", },
    { "=r", "%r", "rn", },
    { "=r", "r", },
    { "=r", "r", },
    { "=r", "m", },
    { "=r", "m", },
    { "=r", "m", },
    { "=r", "m", },
    { "r", "rI", },
    { 0 },
    { "", "", "", },
    { "=r,r", "r,r", "r,K", },
    { "", "", "", },
    { "=r,r", "r,r", "r,K", },
    { "", "", "", },
    { "=r,r", "r,r", "r,K", },
    { "", "", "", },
    { "=r", "r", "rI", },
    { "=r,&r", "0,r", "=r,X", },
    { "=r", "r", },
    { "=r", "r", "", "", },
    { "=r", "r", },
    { "=r", "r", "", "", },
    { "+r", "", "", },
    { "+r", "", "", },
    { "+r", "", "", "n", },
    { "=r", "rI", },
    { "=r,x", "r,x", },
    { "=&r,r", "r,0", },
    { "=r", "r", },
    { "=&r,r", "r,0", },
    { "=r", "r", },
    { "", "", "", "", "", },
    { "", "", "", },
    { "r", },
    { "", "r", },
    { "", "", },
    { "rQ", "", },
    { "", "", "", },
    { "=r", "rQ", "", },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { "r", },
    { 0 },
    { "", "+!r,!r,m,m", "", "rI,J,rI,J", "=X,X,&r,&r", "=X,X,&r,&r", },
    { "", },
  };

const enum machine_mode insn_operand_mode[][MAX_RECOG_OPERANDS] =
  {
    { SImode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, SImode, },
    { SImode, SImode, SImode, SImode, SImode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, VOIDmode, },
    { CCmode, CCmode, CCmode, },
    { CCEVENmode, VOIDmode, CCmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, CCmode, VOIDmode, CCEVENmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, CCmode, VOIDmode, CCEVENmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, CCmode, VOIDmode, CCEVENmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { CCEVENmode, VOIDmode, CCmode, VOIDmode, CCEVENmode, },
    { VOIDmode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, SFmode, VOIDmode, VOIDmode, },
    { VOIDmode, SFmode, VOIDmode, VOIDmode, },
    { VOIDmode, DFmode, VOIDmode, VOIDmode, },
    { SImode, SImode, VOIDmode, VOIDmode, },
    { SImode, SImode, VOIDmode, VOIDmode, },
    { SImode, SImode, VOIDmode, VOIDmode, },
    { SImode, SImode, VOIDmode, VOIDmode, },
    { SImode, SImode, VOIDmode, VOIDmode, },
    { SImode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, VOIDmode, },
    { SImode, SImode, },
    { SFmode, SFmode, },
    { DFmode, DFmode, },
    { CCmode, SImode, SImode, },
    { CCmode, SFmode, SFmode, },
    { CCmode, DFmode, SFmode, },
    { CCmode, SFmode, DFmode, },
    { CCmode, DFmode, DFmode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, },
    { SImode, SImode, CCmode, },
    { SImode, SImode, CCEVENmode, },
    { SImode, SImode, CCEVENmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { SImode, SImode, CCEVENmode, SImode, },
    { SImode, SImode, CCmode, },
    { SImode, SImode, CCEVENmode, },
    { SImode, SImode, CCEVENmode, },
    { VOIDmode, VOIDmode, VOIDmode, VOIDmode, },
    { SImode, SImode, CCEVENmode, SImode, },
    { VOIDmode, },
    { VOIDmode, },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode, CCmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCEVENmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCEVENmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCEVENmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCEVENmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCEVENmode, VOIDmode, VOIDmode, },
    { VOIDmode, CCEVENmode, VOIDmode, VOIDmode, },
    { SImode, },
    { SImode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, VOIDmode, },
    { SImode, VOIDmode, },
    { HImode, HImode, },
    { HImode, HImode, },
    { HImode, SImode, SImode, },
    { QImode, QImode, },
    { QImode, QImode, },
    { QImode, SImode, SImode, },
    { DImode, DImode, },
    { DImode, },
    { DImode, DImode, },
    { DImode, SImode, SImode, },
    { DImode, DImode, },
    { DFmode, DFmode, },
    { VOIDmode, VOIDmode, },
    { DFmode, },
    { DFmode, DFmode, },
    { DFmode, SImode, SImode, },
    { DFmode, DFmode, },
    { SFmode, SFmode, },
    { SFmode, },
    { SFmode, SFmode, },
    { SFmode, SImode, SImode, },
    { SFmode, SFmode, },
    { BLKmode, BLKmode, SImode, SImode, },
    { QImode, BLKmode, },
    { HImode, BLKmode, },
    { SImode, BLKmode, },
    { DImode, BLKmode, },
    { BLKmode, QImode, },
    { BLKmode, HImode, },
    { BLKmode, SImode, },
    { BLKmode, DImode, },
    { VOIDmode, SImode, SImode, SImode, VOIDmode, VOIDmode, },
    { VOIDmode, SImode, SImode, SImode, VOIDmode, SImode, SImode, },
    { SImode, HImode, },
    { SImode, HImode, },
    { HImode, QImode, },
    { HImode, QImode, },
    { SImode, QImode, },
    { SImode, QImode, },
    { DImode, SImode, },
    { SImode, HImode, },
    { SImode, HImode, },
    { HImode, QImode, },
    { HImode, QImode, },
    { SImode, QImode, },
    { SImode, QImode, },
    { DFmode, SFmode, },
    { DFmode, SFmode, },
    { DFmode, SFmode, },
    { SFmode, DFmode, },
    { SFmode, DFmode, },
    { SFmode, DFmode, },
    { DFmode, SImode, },
    { SFmode, SImode, },
    { SImode, DFmode, },
    { SImode, SFmode, },
    { SImode, SImode, SImode, },
    { DFmode, DFmode, DFmode, },
    { DFmode, SFmode, SFmode, },
    { DFmode, DFmode, SFmode, },
    { DFmode, SFmode, DFmode, },
    { DFmode, DFmode, DFmode, },
    { SFmode, SFmode, SFmode, },
    { DImode, DImode, SImode, },
    { DImode, SImode, DImode, },
    { DImode, DImode, DImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { DFmode, DFmode, DFmode, },
    { DFmode, SFmode, SFmode, },
    { DFmode, DFmode, SFmode, },
    { DFmode, SFmode, DFmode, },
    { DFmode, DFmode, DFmode, },
    { SFmode, SFmode, SFmode, },
    { DImode, DImode, SImode, },
    { DImode, SImode, DImode, },
    { DImode, DImode, DImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { DFmode, DFmode, DFmode, },
    { DFmode, SFmode, SFmode, },
    { DFmode, DFmode, SFmode, },
    { DFmode, SFmode, DFmode, },
    { DFmode, DFmode, DFmode, },
    { SFmode, SFmode, SFmode, },
    { VOIDmode },
    { SImode, VOIDmode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, },
    { DFmode, DFmode, DFmode, },
    { DFmode, SFmode, SFmode, },
    { DFmode, DFmode, SFmode, },
    { DFmode, SFmode, DFmode, },
    { SFmode, SFmode, SFmode, },
    { DFmode, DFmode, DFmode, },
    { SImode, SImode, },
    { SImode, HImode, },
    { SImode, SImode, },
    { SImode, DImode, },
    { SImode, SFmode, },
    { SImode, DFmode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { DImode, DImode, DImode, },
    { DImode, DImode, DImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { DImode, DImode, DImode, },
    { DImode, DImode, DImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { DImode, DImode, DImode, },
    { DImode, DImode, DImode, },
    { SImode, SImode, },
    { DImode, DImode, },
    { SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, },
    { VOIDmode },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, SImode, },
    { SImode, SImode, },
    { SImode, SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, },
    { SImode, SImode, SImode, SImode, },
    { SImode, SImode, },
    { SFmode, DFmode, },
    { DFmode, DFmode, },
    { SFmode, SFmode, },
    { DFmode, DFmode, },
    { SFmode, SFmode, },
    { SImode, SImode, SImode, VOIDmode, VOIDmode, },
    { SImode, SImode, SImode, },
    { SImode, },
    { VOIDmode, SImode, },
    { SImode, VOIDmode, },
    { SImode, VOIDmode, },
    { VOIDmode, SImode, VOIDmode, },
    { VOIDmode, SImode, VOIDmode, },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { VOIDmode },
    { SImode, },
    { VOIDmode },
    { VOIDmode, SImode, VOIDmode, SImode, SImode, SImode, },
    { VOIDmode, },
  };

const char insn_operand_strict_low[][MAX_RECOG_OPERANDS] =
  {
    { 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, },
    { 0, },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, },
    { 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0 },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0 },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0, },
    { 0 },
    { 0, 0, 0, 0, 0, 0, },
    { 0, },
  };

extern int register_operand ();
extern int int5_operand ();
extern int immediate_operand ();
extern int partial_ccmode_register_operand ();
extern int scratch_operand ();
extern int relop_no_unsigned ();
extern int pc_or_label_ref ();
extern int equality_op ();
extern int reg_or_bbx_mask_operand ();
extern int arith32_operand ();
extern int general_operand ();
extern int arith_operand ();
extern int real_or_0_operand ();
extern int relop ();
extern int even_relop ();
extern int odd_relop ();
extern int nonimmediate_operand ();
extern int move_operand ();
extern int memory_operand ();
extern int add_operand ();
extern int reg_or_0_operand ();
extern int address_operand ();
extern int arith64_operand ();
extern int arith5_operand ();
extern int int32_operand ();
extern int call_address_operand ();

int (*const insn_operand_predicate[][MAX_RECOG_OPERANDS])() =
  {
    { 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, 0, },
    { 0, 0, 0, },
    { 0, 0, 0, },
    { register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, int5_operand, immediate_operand, },
    { register_operand, register_operand, int5_operand, int5_operand, int5_operand, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, },
    { register_operand, partial_ccmode_register_operand, partial_ccmode_register_operand, },
    { register_operand, partial_ccmode_register_operand, partial_ccmode_register_operand, },
    { register_operand, partial_ccmode_register_operand, partial_ccmode_register_operand, },
    { register_operand, partial_ccmode_register_operand, partial_ccmode_register_operand, },
    { register_operand, register_operand, int5_operand, },
    { register_operand, partial_ccmode_register_operand, int5_operand, },
    { 0, 0, 0, 0, 0, },
    { register_operand, partial_ccmode_register_operand, int5_operand, partial_ccmode_register_operand, scratch_operand, },
    { 0, 0, 0, 0, 0, },
    { register_operand, partial_ccmode_register_operand, int5_operand, partial_ccmode_register_operand, scratch_operand, },
    { 0, 0, 0, 0, 0, },
    { register_operand, partial_ccmode_register_operand, int5_operand, partial_ccmode_register_operand, scratch_operand, },
    { 0, 0, 0, 0, 0, },
    { register_operand, partial_ccmode_register_operand, int5_operand, partial_ccmode_register_operand, scratch_operand, },
    { relop_no_unsigned, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { equality_op, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { equality_op, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { relop_no_unsigned, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { equality_op, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { equality_op, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { equality_op, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { equality_op, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { register_operand, int5_operand, pc_or_label_ref, pc_or_label_ref, },
    { register_operand, int5_operand, pc_or_label_ref, pc_or_label_ref, },
    { register_operand, int5_operand, pc_or_label_ref, pc_or_label_ref, },
    { register_operand, int5_operand, pc_or_label_ref, pc_or_label_ref, },
    { reg_or_bbx_mask_operand, reg_or_bbx_mask_operand, pc_or_label_ref, pc_or_label_ref, },
    { reg_or_bbx_mask_operand, reg_or_bbx_mask_operand, pc_or_label_ref, pc_or_label_ref, },
    { 0, 0, },
    { register_operand, arith32_operand, },
    { register_operand, register_operand, },
    { general_operand, general_operand, },
    { register_operand, register_operand, arith_operand, },
    { register_operand, register_operand, real_or_0_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, real_or_0_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, },
    { register_operand, relop, register_operand, },
    { register_operand, even_relop, register_operand, },
    { register_operand, odd_relop, register_operand, },
    { 0, 0, 0, 0, },
    { register_operand, odd_relop, register_operand, scratch_operand, },
    { register_operand, relop, register_operand, },
    { register_operand, even_relop, register_operand, },
    { register_operand, odd_relop, register_operand, },
    { 0, 0, 0, 0, },
    { register_operand, odd_relop, register_operand, scratch_operand, },
    { 0, },
    { 0, },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { even_relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { odd_relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { even_relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { odd_relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { even_relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { odd_relop, register_operand, pc_or_label_ref, pc_or_label_ref, },
    { register_operand, },
    { register_operand, },
    { general_operand, general_operand, },
    { register_operand, general_operand, register_operand, },
    { nonimmediate_operand, move_operand, },
    { register_operand, arith32_operand, },
    { register_operand, register_operand, immediate_operand, },
    { register_operand, register_operand, immediate_operand, },
    { register_operand, 0, },
    { register_operand, 0, },
    { general_operand, general_operand, },
    { nonimmediate_operand, move_operand, },
    { register_operand, register_operand, immediate_operand, },
    { general_operand, general_operand, },
    { nonimmediate_operand, move_operand, },
    { register_operand, register_operand, immediate_operand, },
    { general_operand, general_operand, },
    { register_operand, },
    { nonimmediate_operand, nonimmediate_operand, },
    { register_operand, register_operand, immediate_operand, },
    { register_operand, immediate_operand, },
    { general_operand, general_operand, },
    { 0, 0, },
    { register_operand, },
    { nonimmediate_operand, nonimmediate_operand, },
    { register_operand, register_operand, immediate_operand, },
    { register_operand, immediate_operand, },
    { general_operand, general_operand, },
    { register_operand, },
    { nonimmediate_operand, nonimmediate_operand, },
    { register_operand, register_operand, immediate_operand, },
    { register_operand, immediate_operand, },
    { 0, 0, arith32_operand, immediate_operand, },
    { register_operand, memory_operand, },
    { register_operand, memory_operand, },
    { register_operand, memory_operand, },
    { register_operand, memory_operand, },
    { memory_operand, register_operand, },
    { memory_operand, register_operand, },
    { memory_operand, register_operand, },
    { memory_operand, register_operand, },
    { 0, register_operand, register_operand, immediate_operand, memory_operand, register_operand, },
    { 0, register_operand, register_operand, immediate_operand, memory_operand, register_operand, immediate_operand, },
    { register_operand, nonimmediate_operand, },
    { register_operand, move_operand, },
    { register_operand, nonimmediate_operand, },
    { register_operand, move_operand, },
    { register_operand, nonimmediate_operand, },
    { register_operand, move_operand, },
    { register_operand, general_operand, },
    { register_operand, nonimmediate_operand, },
    { register_operand, move_operand, },
    { register_operand, nonimmediate_operand, },
    { register_operand, move_operand, },
    { register_operand, nonimmediate_operand, },
    { register_operand, move_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, add_operand, add_operand, },
    { register_operand, general_operand, general_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { reg_or_0_operand, reg_or_0_operand, reg_or_0_operand, },
    { reg_or_0_operand, reg_or_0_operand, },
    { reg_or_0_operand, reg_or_0_operand, reg_or_0_operand, },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, general_operand, general_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { reg_or_0_operand, reg_or_0_operand, reg_or_0_operand, },
    { reg_or_0_operand, reg_or_0_operand, },
    { reg_or_0_operand, reg_or_0_operand, reg_or_0_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, general_operand, general_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { 0 },
    { register_operand, 0, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, register_operand, arith_operand, },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, register_operand, },
    { register_operand, general_operand, general_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, address_operand, },
    { register_operand, address_operand, },
    { register_operand, address_operand, },
    { register_operand, address_operand, },
    { register_operand, address_operand, },
    { register_operand, address_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, arith64_operand, arith64_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, arith64_operand, arith64_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, arith32_operand, arith32_operand, },
    { register_operand, register_operand, register_operand, },
    { register_operand, arith64_operand, arith64_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, memory_operand, },
    { register_operand, memory_operand, },
    { register_operand, memory_operand, },
    { register_operand, memory_operand, },
    { register_operand, arith_operand, },
    { 0 },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, register_operand, arith5_operand, },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, register_operand, arith5_operand, },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, register_operand, arith5_operand, },
    { register_operand, register_operand, arith32_operand, },
    { register_operand, register_operand, arith_operand, },
    { register_operand, register_operand, scratch_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, int5_operand, int5_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, int5_operand, int5_operand, },
    { register_operand, int5_operand, int5_operand, },
    { register_operand, int5_operand, int5_operand, },
    { register_operand, int5_operand, int5_operand, int32_operand, },
    { register_operand, arith_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { register_operand, register_operand, },
    { general_operand, immediate_operand, immediate_operand, 0, 0, },
    { 0, 0, 0, },
    { register_operand, },
    { 0, register_operand, },
    { 0, 0, },
    { call_address_operand, 0, },
    { register_operand, 0, 0, },
    { register_operand, call_address_operand, 0, },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { 0 },
    { register_operand, },
    { 0 },
    { relop_no_unsigned, register_operand, 0, add_operand, scratch_operand, scratch_operand, },
    { 0, },
  };

const int insn_n_alternatives[] =
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    4,
    2,
    2,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    10,
    5,
    1,
    1,
    1,
    1,
    0,
    4,
    1,
    0,
    4,
    1,
    0,
    2,
    8,
    1,
    1,
    0,
    0,
    2,
    8,
    1,
    1,
    0,
    2,
    8,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    3,
    0,
    3,
    0,
    3,
    1,
    0,
    4,
    0,
    4,
    0,
    4,
    1,
    1,
    2,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    2,
    1,
    1,
    1,
    0,
    4,
    1,
    1,
    1,
    0,
    3,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    1,
    2,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    4,
    0,
  };
